/**
 * Author: Arthur Botelho
 * Description: chmin range update and range queries
 * Time: O((N+Q) (log \ (N+mxn))^2) amortized
 * Memory: O(N)
*/

#define CLZ __builtin_clz
template<class S>
struct SegBeats{ using T = typename S::T; using L = typename S::L;
	int n; vector<T> seg; vector<L> lz; vector<bool> ig;
	int ceillog(signed x){return CLZ(1)-CLZ(x)+(__builtin_popcount(x)!=1);}
	SegBeats(int s):n(1<<ceillog(s)),seg(2*n,S::id),lz(2*n),ig(2*n,1){}
	void update(L v, int l, int r){return updt(v,l,r,1,0,n-1);}
	T query(int l, int r){return qry(l,r,1,0,n-1);}
	void updt(L v, int lq, int rq, int no, int lx, int rx){
		//debug((vi{v,lq,rq,no,lx,rx}));
		if (rq < lx or rx < lq or S::brk(v,seg[no]))return;
		if (lq <= lx and rx <= rq and S::tag(v,seg[no])){
			apply(no, v, rx-lx+1); return;
		}
		prop(no,lx,rx); int mid = lx+(rx-lx)/2;
		updt(v,lq,rq,no<<1,lx,mid);
		updt(v,lq,rq,no<<1|1,mid+1,rx);
		seg[no] = S::op(seg[no<<1],seg[no<<1|1]);
	}
	T qry(int lq, int rq, int no, int lx, int rx){
		prop(no,lx,rx); int mid = lx+(rx-lx)/2;
		if (rq < lx or rx < lq)return S::id;
		if (lq <= lx and rx <= rq)return seg[no];
		return S::op(qry(lq,rq,no<<1,lx,mid),qry(lq,rq,no<<1|1,mid+1,rx));
	}
	inline void apply(int p, L v, int s){
		seg[p] = S::ch(seg[p],v,s);
	}
	void prop(int p, int l, int r){git
		if (l==r)return;
		apply(p<<1, seg[p].max1, (r-l+1)/2);
		apply(p<<1|1, seg[p].max1, (r-l+1)/2);
	}
};

struct node{
	int max1,max2,maxc; ll sum;
};

struct Spec{ using T = node; using L = int;
	static constexpr T id = node{-oo,-oo,0,0};
	static T op(T a, T b){
		node n;
		if (a.max1 > b.max1){
			n.max1 = a.max1;
			n.max2 = max(a.max2, b.max1);
			n.maxc = a.maxc;
		}
		else if (a.max1 == b.max1){
			n.max1 = a.max1;
			n.max2 = max(a.max2, b.max2);
			n.maxc = a.maxc+b.maxc;
		}
		else{
			n.max1 = b.max1;
			n.max2 = max(b.max2, a.max1);
			n.maxc = b.maxc;
		}
		n.sum=a.sum+b.sum;
		//a.print(); b.print(); n.print();
		return n;
	}
	static T ch(T a, L b, int s){
		if (a.max1 <= b)return a;
		if (a.max2 <= b){
			a.sum -= (ll)(a.max1-b)*a.maxc;
			a.max1 = b; return a;
		}
		return a;
	}
			
	static L cmp(L a, L b){return min(a,b);}
	static bool brk(L a, T b){
		return b.max1 <= a;
	}
	static bool tag(L a, T b){
		return b.max2 < a;
	}
};